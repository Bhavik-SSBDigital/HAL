generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id                 Int       @id @default(autoincrement())
  type               String
  code               String    @unique
  name               String    @unique
  status             String
  headId             Int?
  adminId            Int?
  parentDepartmentId Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
  createdById        Int
  head               User?     @relation("HeadOfDepartment", fields: [headId], references: [id], onDelete: Cascade)
  admin              User?     @relation("AdminOfDepartment", fields: [adminId], references: [id], onDelete: Cascade)
  parentDepartment   Department? @relation("ParentDepartment", fields: [parentDepartmentId], references: [id], onDelete: Cascade)
  subDepartments     Department[] @relation("ParentDepartment")
  documents          Document[]
  roles              Role[]    @relation("BranchRoles")
  users              User[]    @relation("BranchUsers")
  DepartmentRoleAssignment DepartmentRoleAssignment[]
  departmentStepProgresses DepartmentStepProgress[] @relation()
  documentAccesses   DocumentAccess[] @relation()
}

model Document {
  id                    Int       @id @default(autoincrement())
  name                  String
  type                  String
  path                  String    @unique
  createdById           Int
  createdOn             DateTime  @default(now())
  lastUpdatedOn         DateTime  @updatedAt
  isArchived            Boolean   @default(false)
  inBin                 Boolean   @default(false)
  parentId              Int?
  departmentId           Int?
  isProject             Boolean?
  isInvolvedInProcess   Boolean   @default(false)
  minimumSignsOnFirstPage Int?
  isRejected            Boolean   @default(false)
  tags                  String[]  @default([])
  isRecord              Boolean   @default(true)
  children              Document[] @relation("DocumentChildren")
  parent                Document? @relation("DocumentChildren", fields: [parentId], references: [id], onDelete: Cascade)
  department            Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  processDocuments      ProcessDocument[] @relation("ProcessDocumentRelation")
  documentAccesses      DocumentAccess[] @relation("DocumentAccesses")
  documentHistory       DocumentHistory[] @relation("DocumentHistory")
  replacedByProcessDocuments ProcessDocument[] @relation("ReplacedDocument")
  replacedByDocumentHistory DocumentHistory[] @relation("ReplacedDocumentHistory")
  workflows             Workflow[] @relation("WorkflowTemplates", name: "WorkflowTemplates") 
}

model Role {
  id              Int       @id @default(autoincrement())
  departmentId    Int?
  status          String
  role            String
  isRootLevel     Boolean   @default(false)
  isAdmin         Boolean   @default(false)
  isActive        Boolean   @default(true)
  parentRoleId    Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  branch          Department? @relation("BranchRoles", fields: [departmentId], references: [id], onDelete: Cascade)
  parentRole      Role?     @relation("RoleHierarchy", fields: [parentRoleId], references: [id], onDelete: Cascade)
  childRoles      Role[]    @relation("RoleHierarchy")
  users           UserRole[]
  departmentRoleAssignment DepartmentRoleAssignment[]
  documentAccesses DocumentAccess[] @relation()
}

model User {
  id                    Int       @id @default(autoincrement())
  username              String    @unique
  email                 String
  password              String
  name                  String?
  specialUser           Boolean   @default(false)
  createdAt             DateTime  @default(now())
  isRootLevel           Boolean?
  isAdmin               Boolean?
  updatedAt             DateTime? @updatedAt
  createdById           Int?
  signaturePicFileName  String?
  profilePicFileName    String?
  dscFileName           String?
  createdBy             User?     @relation("CreatedByRelation", fields: [createdById], references: [id], onDelete: Cascade)
  createdUsers          User[]    @relation("CreatedByRelation")
  tokens                Token[]
  roles                 UserRole[]
  branches              Department[] @relation("BranchUsers")
  headOfDepartments     Department[] @relation("HeadOfDepartment")
  adminOfDepartments    Department[] @relation("AdminOfDepartment")
  workflowsCreated      Workflow[]
  initiatedProcesses    ProcessInstance[]
  qaInitiations         ProcessQA[]
  processNotifications  ProcessNotification[] @relation("UserNotifications")
  processClaims         ProcessClaim[] @relation("UserClaims")
  systemLogs            SystemLog[] @relation("UserSystemLogs")
  pickedProcessSteps    ProcessStepInstance[] @relation("UserPickedSteps")
  rejectedProcessDocuments ProcessDocument[] @relation("RejectedByUser")
  signatures            DocumentSignature[] @relation("UserSignatures")
  rejections            DocumentRejection[] @relation("UserRejections")
  signCoordinates       SignCoordinate[] @relation()
  documentAccesses      DocumentAccess[] @relation()
  grantedDocumentAccesses DocumentAccess[] @relation("GrantedByUser")
  documentHistory       DocumentHistory[] @relation("DocumentHistoryByUser")
  initiatedRecommendations Recommendation[] @relation("RecommendationInitiator")
  recommendedRecommendations Recommendation[] @relation("RecommendationRecommender")
}

model Token {
  id      Int       @id @default(autoincrement())
  token   String
  userId  Int
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}

model UserRole {
  id      Int       @id @default(autoincrement())
  userId  Int
  roleId  Int
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role    Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Workflow {
  id               String    @id @default(uuid())
  name             String
  description      String?
  version          Int       @default(1)
  previousVersionId String?
  createdById      Int
  isActive         Boolean   @default(true)
  escalationTime   Int?      @default(48)
  autoApprovalAfter Int?     @default(168)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  previousVersion  Workflow? @relation("WorkflowVersion", fields: [previousVersionId], references: [id], onDelete: Cascade)
  createdBy        User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  steps            WorkflowStep[]
  processes        ProcessInstance[]
  nextVersions     Workflow[] @relation("WorkflowVersion")
  templateDocuments Document[] @relation("WorkflowTemplates", name: "WorkflowTemplates") 
}

model WorkflowStep {
  id              String    @id @default(uuid())
  workflowId      String
  stepNumber      Int
  stepName        String
  stepType        StepType  @default(APPROVAL)
  allowParallel   Boolean   @default(false)
  isHierarchical  Boolean   @default(false)
  direction       String?   @default("downwards")
  selectedRoles   Int[]     @default([])
  escalationTime  Int?      @default(24)
  autoApprovalAfter Int?    @default(72)
  requiresDocument Boolean  @default(true)
  workflow        Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  assignments     WorkflowAssignment[]
  processSteps    ProcessStepInstance[]
  currentStepProcessInstances ProcessInstance[] @relation("CurrentStepRelation")
  departmentStepProgresses DepartmentStepProgress[]
  signCoordinates SignCoordinate[] @relation()
  @@unique([workflowId, stepNumber])
}

model WorkflowAssignment {
  id            String       @id @default(uuid())
  stepId        String
  actionType    ActionType
  assigneeIds   Int[]
  assigneeType  AssigneeType
  allowParallel Boolean      @default(false)
  accessTypes   AccessType[] @default([])
  direction     Direction?
  step          WorkflowStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  departmentRoles DepartmentRoleAssignment[]
  documentAccesses DocumentAccess[] @relation("WorkflowAssignmentDocAccess")
  stepInstances   ProcessStepInstance[]
  assignmentProgresses AssignmentProgress[]
}

model DepartmentRoleAssignment {
  id                 Int       @id @default(autoincrement())
  workflowAssignmentId String
  departmentId       Int
  roleId             Int
  workflowAssignment WorkflowAssignment @relation(fields: [workflowAssignmentId], references: [id], onDelete: Cascade)
  department         Department   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  role               Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)
  @@unique([workflowAssignmentId, departmentId, roleId])
}

model ProcessWorkflowVersion {
  id          String    @id @default(uuid())
  processId   String
  oldVersion  Int
  newVersion  Int
  migratedAt  DateTime  @default(now())
}

model DocumentAccess {
  id               String       @id @default(uuid())
  documentId       Int
  stepInstanceId   String?
  processId        String?
  userId           Int?
  roleId           Int?
  departmentId     Int?
  grantedById      Int?
  accessType       AccessType[] @default([])
  accessLevel      AccessLevel  @default(STANDARD)
  docAccessThrough DocAccessThrough @default(SELF)
  grantedAt        DateTime     @default(now())
  reopenCycle      Int          @default(0)
  document         Document     @relation("DocumentAccesses", fields: [documentId], references: [id], onDelete: Cascade)
  stepInstance     ProcessStepInstance? @relation("StepInstanceDocumentAccess", fields: [stepInstanceId], references: [id], onDelete: Cascade)
  processInstance  ProcessInstance? @relation(fields: [processId], references: [id], onDelete: Cascade)
  assignment       WorkflowAssignment? @relation("WorkflowAssignmentDocAccess", fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId     String?
  user             User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  role             Role?        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  department       Department?  @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  grantedBy        User?        @relation("GrantedByUser", fields: [grantedById], references: [id], onDelete: Cascade)
}

model ProcessNotification {
  id          String    @id @default(uuid())
  stepId      String?
  userId      Int
  notifiedAt  DateTime  @default(now())
  removedAt   DateTime?
  readAt      DateTime?
  status      String    @default("ACTIVE")
  type        NotificationType
  metadata    Json?
  stepInstance ProcessStepInstance? @relation("StepInstanceNotifications", fields: [stepId], references: [id], onDelete: Cascade)
  user        User      @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
}

model ProcessClaim {
  id         String    @id @default(uuid())
  stepId     String
  userId     Int
  claimedAt  DateTime  @default(now())
  user       User      @relation("UserClaims", fields: [userId], references: [id], onDelete: Cascade)
}

model SystemLog {
  id        String    @id @default(uuid())
  userId    Int?
  action    String
  details   Json?
  timestamp DateTime  @default(now())
  user      User?     @relation("UserSystemLogs", fields: [userId], references: [id], onDelete: Cascade)
}

model ProcessInstance {
  id               String    @id @default(uuid())
  name             String
  workflowId       String
  initiatorId      Int
  currentStepId    String?
  status           ProcessStatus @default(PENDING)
  customizations   Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  isRecirculated   Boolean   @default(false)
  reopenCycle      Int       @default(0)
  workflow         Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  initiator        User      @relation(fields: [initiatorId], references: [id], onDelete: Cascade)
  currentStep      WorkflowStep? @relation("CurrentStepRelation", fields: [currentStepId], references: [id], onDelete: Cascade)
  stepInstances    ProcessStepInstance[]
  documents        ProcessDocument[] @relation("ProcessDocumentRelation")
  qaChannels       ProcessQA[]
  trackings        ProcessTracking[]
  documentAccess   DocumentAccess[]
  assignmentProgresses AssignmentProgress[] @relation()
  recommendations   Recommendation[]
  departmentStepProgresses DepartmentStepProgress[] @relation()
  documentHistory  DocumentHistory[] @relation("ProcessDocumentHistory")
  storagePath     String    @default("")
}

model AssignmentProgress {
  id                String    @id @default(uuid())
  assignmentId      String
  processId         String
  currentLevel      Int?
  roleHierarchy     Json?
  completed         Boolean   @default(false)
  completedAt       DateTime?
  peerApprovalRequired Boolean? @default(false)
  completedRoles    Int[]     @default([])
  workflowAssignment WorkflowAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  process           ProcessInstance @relation(fields: [processId], references: [id], onDelete: Cascade)
  stepInstances     ProcessStepInstance[]
  departmentStepProgress DepartmentStepProgress? @relation("DepartmentAssignmentProgress")
  @@unique([assignmentId, processId])
}

model ProcessStepInstance {
  id                 String    @id @default(uuid())
  processId          String
  assignmentId       String?
  progressId         String?
  assignedTo         Int
  roleId             Int?
  departmentId       Int?
  status             StepStatus @default(PENDING)
  claimedAt          DateTime?
  deadline           DateTime?
  pickedById         Int?
  createdAt          DateTime  @default(now())
  stepId             String?
  decisionComment    String?
  decisionAt         DateTime?
  isRecirculated     Boolean   @default(false)
  recirculationCycle Int       @default(0)
  originalStepInstanceId String?
  recirculationReason String?
  process            ProcessInstance @relation(fields: [processId], references: [id], onDelete: Cascade)
  workflowAssignment WorkflowAssignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentProgress AssignmentProgress? @relation(fields: [progressId], references: [id], onDelete: Cascade)
  pickedBy           User?     @relation(fields: [pickedById], references: [id], name: "UserPickedSteps", onDelete: Cascade)
  workflowStep       WorkflowStep? @relation(fields: [stepId], references: [id], onDelete: Cascade)
  documentAccesses   DocumentAccess[] @relation("StepInstanceDocumentAccess")
  notifications      ProcessNotification[] @relation("StepInstanceNotifications")
  escalations        Escalation[]
  recommendations    Recommendation[] @relation()
  processQA          ProcessQA[] @relation("StepInstanceQA")
  documentHistory    DocumentHistory[] @relation("StepInstanceDocumentHistory")
  documentSignatures DocumentSignature[] @relation()
  documentRejections DocumentRejection[] @relation()
  @@index([assignmentId])
}

model Escalation {
  id             String         @id @default(uuid())
  stepInstanceId String
  escalationType EscalationType
  triggerTime    DateTime
  status         EscalationStatus @default(PENDING)
  stepInstance   ProcessStepInstance @relation(fields: [stepInstanceId], references: [id], onDelete: Cascade)
}

model ProcessTracking {
  id         String    @id @default(uuid())
  processId  String
  userId     Int
  actionType ActionType
  timestamp  DateTime  @default(now())
  process    ProcessInstance @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model ProcessDocument {
  id               String    @id @default(uuid())
  processId        String
  description      String?
  reasonOfSupersed String?
  partNumber       Int?
  preApproved      Boolean   @default(false)
  tags                  String[]  @default([])
  documentId       Int
  isReplacement    Boolean   @default(false)
  superseding      Boolean   @default(false)
  replacedDocumentId Int?
  rejectedById     Int?
  reopenCycle      Int       @default(0)
  process          ProcessInstance @relation("ProcessDocumentRelation", fields: [processId], references: [id], onDelete: Cascade)
  document         Document  @relation("ProcessDocumentRelation", fields: [documentId], references: [id], onDelete: Cascade)
  replacedDocument Document? @relation("ReplacedDocument", fields: [replacedDocumentId], references: [id], onDelete: Cascade)
  rejectedBy       User?     @relation("RejectedByUser", fields: [rejectedById], references: [id], onDelete: Cascade)
  signatures       DocumentSignature[]
  rejections       DocumentRejection[]
  signCoordinates  SignCoordinate[] @relation()
  documentHistory  DocumentHistory[] @relation("ProcessDocumentDocumentHistory")
}

model DocumentSignature {
  id                        String    @id @default(uuid())
  processDocumentId         String
  userId                    Int
  reason                    String?
  signedAt                  DateTime  @default(now())
  byRecommender             Boolean   @default(false)
  isAttachedWithRecommendation Boolean @default(false)
  processStepInstanceId     String?
  processDocument           ProcessDocument @relation(fields: [processDocumentId], references: [id], onDelete: Cascade)
  user                      User      @relation("UserSignatures", fields: [userId], references: [id], onDelete: Cascade)
  processStepInstance       ProcessStepInstance? @relation(fields: [processStepInstanceId], references: [id], onDelete: Cascade)
}

model ProcessQA {
  id           String    @id @default(uuid())
  processId    String
  stepInstanceId String
  initiatorId  Int
  entityId     Int
  entityType   AssigneeType
  question     String
  answer       String?
  status       String?   @default("OPEN")
  createdAt    DateTime  @default(now())
  answeredAt   DateTime?
  details      Json?
  process      ProcessInstance @relation(fields: [processId], references: [id], onDelete: Cascade)
  stepInstance ProcessStepInstance @relation("StepInstanceQA", fields: [stepInstanceId], references: [id], onDelete: Cascade)
  initiator    User      @relation(fields: [initiatorId], references: [id], onDelete: Cascade)
}

model DepartmentStepProgress {
  id               String    @id @default(uuid())
  processId        String
  stepId           String
  departmentId     Int
  roleLevels       Json
  currentLevel     Int
  isCompleted      Boolean   @default(false)
  direction        Direction
  completedRoles   Int[]     @default([])
  requiredRoles    Int[]
  assignmentProgressId String? @unique
  process          ProcessInstance @relation(fields: [processId], references: [id], onDelete: Cascade)
  step             WorkflowStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  department       Department   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  assignmentProgress AssignmentProgress? @relation(name: "DepartmentAssignmentProgress", fields: [assignmentProgressId], references: [id], onDelete: Cascade)
  @@unique([processId, stepId, departmentId])
}

model SignCoordinate {
  id              String    @id @default(uuid())
  processDocumentId String
  page            Int
  x               Float
  y               Float
  width           Float
  height          Float
  stepId          String?
  isSigned        Boolean   @default(false)
  signedById      Int?
  createdAt       DateTime  @default(now())
  processDocument ProcessDocument @relation(fields: [processDocumentId], references: [id], onDelete: Cascade)
  step            WorkflowStep? @relation(fields: [stepId], references: [id], onDelete: Cascade)
  signedBy        User?     @relation(fields: [signedById], references: [id], onDelete: Cascade)
}

model DocumentHistory {
  id                 String    @id @default(uuid())
  documentId         Int
  processId          String
  stepInstanceId     String?
  userId             Int
  actionType         DocumentActionType
  actionDetails      Json?
  createdAt          DateTime  @default(now())
  replacedDocumentId Int?
  isRecirculationTrigger Boolean @default(false)
  processDocumentId  String?
  document           Document  @relation("DocumentHistory", fields: [documentId], references: [id], onDelete: Cascade)
  process            ProcessInstance @relation("ProcessDocumentHistory", fields: [processId], references: [id], onDelete: Cascade)
  stepInstance       ProcessStepInstance? @relation("StepInstanceDocumentHistory", fields: [stepInstanceId], references: [id], onDelete: Cascade)
  user               User      @relation("DocumentHistoryByUser", fields: [userId], references: [id], onDelete: Cascade)
  replacedDocument   Document? @relation("ReplacedDocumentHistory", fields: [replacedDocumentId], references: [id], onDelete: Cascade)
  processDocument    ProcessDocument? @relation("ProcessDocumentDocumentHistory", fields: [processDocumentId], references: [id], onDelete: Cascade)
}

model Recommendation {
  id               String    @id @default(uuid())
  processId        String
  stepInstanceId   String
  initiatorId      Int
  recommenderId    Int
  recommendationText String
  documentSummaries Json?
  responseText     String?
  status           String    @default("OPEN")
  createdAt        DateTime  @default(now())
  respondedAt      DateTime?
  details          Json?
  process          ProcessInstance @relation(fields: [processId], references: [id], onDelete: Cascade)
  stepInstance     ProcessStepInstance @relation(fields: [stepInstanceId], references: [id], onDelete: Cascade)
  initiator        User      @relation("RecommendationInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  recommender      User      @relation("RecommendationRecommender", fields: [recommenderId], references: [id], onDelete: Cascade)
}

model DocumentRejection {
  id                        String    @id @default(uuid())
  processDocumentId         String
  userId                    Int
  reason                    String?
  rejectedAt                DateTime  @default(now())
  byRecommender             Boolean   @default(false)
  isAttachedWithRecommendation Boolean @default(false)
  processStepInstanceId     String?
  processDocument           ProcessDocument @relation(fields: [processDocumentId], references: [id], onDelete: Cascade)
  user                      User      @relation("UserRejections", fields: [userId], references: [id], onDelete: Cascade)
  processStepInstance       ProcessStepInstance? @relation(fields: [processStepInstanceId], references: [id], onDelete: Cascade)
}

enum StepType {
  APPROVAL
  REVIEW
  NOTIFICATION
}

enum ApproverType {
  USER
  ROLE
  DEPARTMENT
  UNIT
}

enum Direction {
  UPWARDS
  DOWNWARDS
}

enum AccessLevel {
  STANDARD
  FULL
}

enum DocAccessThrough {
  PROCESS
  ADMINISTRATION
  SELF
}

enum NotificationType {
  STEP_ASSIGNMENT
  DOCUMENT_UPLOAD
  DOCUMENT_APPROVAL
  PROCESS_COMPLETION
  DOCUMENT_QUERY
}

enum AccessType {
  READ
  EDIT
  DOWNLOAD
}

enum AssigneeType {
  USER
  ROLE
  DEPARTMENT
  UNIT
}

enum ActionType {
  APPROVAL
  REVIEW
  NOTIFICATION
}

enum ProcessStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

enum StepStatus {
  PENDING
  APPROVED
  REJECTED
  SKIPPED
  IN_PROGRESS
  ESCALATED
  FOR_RECIRCULATION
  FOR_RECOMMENDATION
}

enum EscalationType {
  REMINDER
  ESCALATION
  AUTO_APPROVAL
}

enum EscalationStatus {
  PENDING
  TRIGGERED
  COMPLETED
}

enum DocumentActionType {
  UPLOADED
  REPLACED
  REJECTED
  SIGNED
  FEEDBACK
}