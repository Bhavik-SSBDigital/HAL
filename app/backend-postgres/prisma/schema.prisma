generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id                 Int          @id @default(autoincrement())
  type               String
  code               String       @unique
  name               String       @unique
  status             String
  headId             Int?
  adminId            Int?
  parentDepartmentId Int?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime?    @updatedAt
  createdById        Int
  head               User?        @relation("HeadOfDepartment", fields: [headId], references: [id])
  admin              User?        @relation("AdminOfDepartment", fields: [adminId], references: [id])
  parentDepartment   Department?  @relation("ParentDepartment", fields: [parentDepartmentId], references: [id])
  subDepartments     Department[] @relation("ParentDepartment")
  documents          Document[]
  roles              Role[]       @relation("BranchRoles")
  users              User[]       @relation("BranchUsers")
}

model Document {
  id                      Int          @id @default(autoincrement())
  name                    String
  type                    String
  path                    String       @unique
  createdById             Int
  createdOn               DateTime     @default(now())
  lastUpdatedOn           DateTime     @updatedAt
  children                Document[]   @relation("DocumentChildren")
  parent                  Document?    @relation("DocumentChildren", fields: [parentId], references: [id])
  parentId                Int?
  departmentId            Int?
  department              Department?  @relation(fields: [departmentId], references: [id])
  isProject               Boolean?
  isInvolvedInProcess     Boolean      @default(false)
  minimumSignsOnFirstPage Int?
  isRejected              Boolean      @default(false)
  processDocuments        ProcessDocument[]
}

model Role {
  id                  Int         @id @default(autoincrement())
  departmentId        Int?
  status              String
  role                String
  isRootLevel         Boolean     @default(false)
  parentRoleId        Int?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime?   @updatedAt
  branch              Department? @relation("BranchRoles", fields: [departmentId], references: [id])
  parentRole          Role?       @relation("RoleHierarchy", fields: [parentRoleId], references: [id])
  childRoles          Role[]      @relation("RoleHierarchy")
  users               UserRole[]
  writable            Int[]       @default([])
  readable            Int[]       @default([])
  downloadable        Int[]       @default([])
  fullAccessWritable  Int[]       @default([])
  fullAccessReadable  Int[]       @default([])
  fullAccessDownloadable Int[]    @default([])
}

model User {
  id                 Int           @id @default(autoincrement())
  username           String        @unique
  email              String        @unique
  password           String
  name               String?
  specialUser        Boolean       @default(false)
  createdAt          DateTime      @default(now())
  isRootLevel        Boolean?
  isAdmin            Boolean?
  tokens             Token[]
  updatedAt          DateTime?     @updatedAt
  createdById        Int?
  createdBy          User?         @relation("CreatedByRelation", fields: [createdById], references: [id])
  createdUsers       User[]        @relation("CreatedByRelation")
  roles              UserRole[]
  branches           Department[]  @relation("BranchUsers")
  headOfDepartments  Department[]  @relation("HeadOfDepartment")
  adminOfDepartments Department[]  @relation("AdminOfDepartment")
  workflowsCreated   Workflow[]
  initiatedProcesses ProcessInstance[]
  qaInitiations      ProcessQA[]
  writable           Int[]
  readable           Int[]
  downloadable       Int[]
  uploadable         Int[]
}

model Token {
  id     Int    @id @default(autoincrement())
  token  String
  userId Int
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId])
}

model UserRole {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])
}

model Workflow {
  id                 String      @id @default(uuid())
  name               String
  description        String?
  version            Int
  previousWorkflowId String?
  previousWorkflow   Workflow?   @relation("WorkflowHistory", fields: [previousWorkflowId], references: [id])
  createdById        Int
  createdBy          User        @relation(fields: [createdById], references: [id])
  isActive           Boolean     @default(true)
  steps              WorkflowStep[]
  processes          ProcessInstance[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  nextWorkflows      Workflow[]  @relation("WorkflowHistory")
}

model WorkflowStep {
  id                  String         @id @default(uuid())
  workflowId          String
  workflow            Workflow       @relation(fields: [workflowId], references: [id])
  stepNumber          Int
  stepName            String
  allowParallel       Boolean        @default(false)

  // Additional fields
  assignments         WorkflowAssignment[]
  processSteps        ProcessStepInstance[]
  currentProcessInstances   ProcessInstance[]

  @@unique([workflowId, stepNumber])  // Ensure the steps are ordered by stepNumber
}













enum StepType {
  APPROVAL
  REVIEW
  RECOMMENDATION
  NOTIFICATION
}

enum ApproverType {
  USER
  ROLE
  DEPARTMENT
  UNIT
}

model WorkflowAssignment {
  id            String   @id @default(uuid())
  stepId        String
  step          WorkflowStep @relation(fields: [stepId], references: [id])
  actionType    ActionType
  assigneeIds   Int[]
  assigneeType  AssigneeType
}

enum AssigneeType {
  USER
  ROLE
  DEPARTMENT
  UNIT
}

enum ActionType {
  APPROVAL
  REVIEW
  RECOMMENDATION
  NOTIFICATION
}

model ProcessInstance {
  id             String   @id @default(uuid())
  workflowId     String
  workflow       Workflow @relation(fields: [workflowId], references: [id])
  initiatorId    Int
  initiator      User     @relation(fields: [initiatorId], references: [id])
  currentStepId  String?
  currentStep    WorkflowStep? @relation(fields: [currentStepId], references: [id])
  status         ProcessStatus @default(PENDING)
  escalationTime DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  stepInstances  ProcessStepInstance[]
  documents      ProcessDocument[]
  qaChannels     ProcessQA[]
  trackings      ProcessTracking[]
}

enum ProcessStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

model ProcessStepInstance {
  id           String   @id @default(uuid())
  processId    String
  process      ProcessInstance @relation(fields: [processId], references: [id])
  stepId       String
  step         WorkflowStep @relation(fields: [stepId], references: [id])
  assignedTo   Int
  assignedType AssigneeType
  status       StepStatus @default(PENDING)
  comments     String?
  updatedAt    DateTime? @updatedAt
  escalations  Escalation[]
  qaChannels   ProcessQA[]
}

enum StepStatus {
  PENDING
  APPROVED
  REJECTED
  SKIPPED
}

model Escalation {
  id             String   @id @default(uuid())
  stepInstanceId String
  stepInstance   ProcessStepInstance @relation(fields: [stepInstanceId], references: [id])
  escalationType EscalationType
  triggerTime    DateTime
  status         EscalationStatus @default(PENDING)
}

enum EscalationType {
  REMINDER
  ESCALATION
  AUTO_APPROVAL
}

enum EscalationStatus {
  PENDING
  TRIGGERED
  COMPLETED
}

model ProcessTracking {
  id         String   @id @default(uuid())
  processId  String
  process    ProcessInstance @relation(fields: [processId], references: [id])
  userId     Int
  actionType ActionType
  timestamp  DateTime @default(now())
}

model ProcessDocument {
  id         String   @id @default(uuid())
  processId  String
  process    ProcessInstance @relation(fields: [processId], references: [id])
  documentId Int
  document   Document @relation(fields: [documentId], references: [id])
}

model ProcessQA {
  id            String   @id @default(uuid())
  processId     String
  process       ProcessInstance @relation(fields: [processId], references: [id])
  stepInstanceId String
  stepInstance  ProcessStepInstance @relation(fields: [stepInstanceId], references: [id])
  initiatorId   Int
  initiator     User @relation(fields: [initiatorId], references: [id])
  entityId      Int
  entityType    AssigneeType
  question      String
  answer        String?
  createdAt     DateTime @default(now())
  answeredAt    DateTime?
}